---
import { getCollection } from "astro:content";
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';

// Cette fonction retourne toutes les valeurs possibles pour la route dynamique
export async function getStaticPaths() {
  // Récupérer toutes les recettes (LOCAL à getStaticPaths)
  const recettes = await getCollection("recette");

  // Obtenir toutes les catégories uniques
  const categories = [...new Set(recettes.map((r) => r.data.category))];
  return categories.map((category) => ({
    params: { category }, // "category" est le nom de la variable dynamique dans le fichier
  }));
}

// Récupérer la catégorie depuis l'URL via Astro.params
const { category } = Astro.params; // Utiliser Astro.params pour obtenir le paramètre dynamique

// Filtrer les recettes en fonction de la catégorie
const recettesPourFiltrage = await getCollection("recette"); // Récupérer à nouveau pour le filtrage
const filteredRecettes = recettesPourFiltrage.filter(
  (recette) => recette.data.category === category
);


const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
---

<html lang="en">
  <head>
<BaseHead title={title} description={description} />
  </head>
  <body>
    <Header />
<main>
  <h1>
    Recettes {
      category
        ? category.charAt(0).toUpperCase() + category.slice(1)
        : "Catégorie inconnue"
    }
  </h1>

  {
    filteredRecettes.length > 0 ? (
      <ul>
        {filteredRecettes.map((recette) => (
          <li>
            <a href={`/recettes/${recette.id}`}>
              <h2>{recette.data.title}</h2>
              <img src={recette.data.heroImage} alt={recette.data.title} />
            </a>
          </li>
        ))}
      </ul>
    ) : (
      <p>Aucune recette trouvée dans cette catégorie.</p>
    )
  }
</main>
<Footer />
  </body>
</html>